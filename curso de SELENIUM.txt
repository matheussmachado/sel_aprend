.A3 MINHA PRIMEIRA AUTOMA��O

O c�digo PYTHON importa a biblioteca do SELENIUM que possui uma engine chamada WEB-DRIVER que interage com o NAVEGADOR especifico

*PARA RODAR OS C�DIGOS DEVE SER PELO TERMINAL E DEVE EST� ATIVADO NA VENV POIS O SELENIUM ESTA�INSTALADO L�


>>> from selenium.webdriver import Firefox
>>> browser = Firefox()		#um objeto Firefox é criado e ao rodar o c�digo, abre um navegador do firefox
>>> browser.quit()	#fecha o navegador aberto

-> Elementos html

<tag atributo=valor> 

	content (outras tags, textos e etc)

</tag>


-> DOM (Document Object Model)

- d� a �rvore de uma janela e seus objetos e seus elementos 


-> Selenium

- a vis�o da arquitetura pelo selenium

>>> browser.get('http://ddg.gg')	#acessa a pagina da url passada no argumento

>>> p = browser.find_element_by_tag_name('<nomeDaTag>')	#retorna um web element

>>> p.click() 	# clica no elemento

>>> p.text 	#retorna o conte�do de texto daquela tag

*dependendo da situação é importante ter um delay (sleep) para obter umm conteúdo

>>> p = browser.find_elements_by_tag_name('<nomeDaTag>')    #retorna uma lista com web elements, 							    	    atentando ao s de elements

>>> find_elements_by_tag_name()  
retorna uma lista contendo os elementos web drives que tem o nome da tag passada no arg

>>> p.get_attribute('<nomeDaTag>')
retorna o valor do atributo



.A4 NAVEGA��O E ATRIBUTOS

-> Busca aninhada

o conte�do de uma tag pode ser outra tag

- as tags est�o aninhadas
- o DOM hierarquiza a estrutura de ninho dentre as tags

-> Encontrar o elemento especifico

ul = brws.find_element_by_tag_name('ul')	#vai pegar o primeiro elemento ul na hierarquia DOM

li = ul.find_elements_by_tag_name('li') 	#dentro de ul há outros webElement do tipo li que podem ser acessados, pois 'li' está aninhado em'ul'

li[0].find_elements_by_tag_name('a')  #continua o ciclo, obtendo o elemento âncora dentro de li[0]


-> Atributos

seja o webElement 'a':

seus atributos:

- href
- text (esse mais ou menos)

>>> a.get_attribute('href')
#retorna o link, que é o valor do atributo href do objeto webElement a (string)

com o href é possivel diferenciar links das paginas

>>> a.text
retorna o content de texto (string)


-> Navegação:

estrutura da pagina 

--> Histórico da janela aberta no momento:

se comporta como uma pilha, em que o ÚLTIMO site acessado sempre ocupa a POSIÇÃO ZERO do hist�rico

browser.back()		#volta para o penultimo elemento do hist�rico
browser.forward()	#avan�a para o pr�ximo elemento em que se encontra o site do hist�rico

#n�o faz uma nova requisi��o, mas sim utiliza os dados em cache, do ultimo estado em que estava

*esse hist�rico � referente a janela aberta no momento, e n�o ao hist�rico completo de navaga��o do navegador. O que ocorre � que o JS altera o estado da url da janela aberta, pegando tudo o que t� dentro do contexto dessa janela aberta dinamicamente. 
*O hist�rico na verdade � um hist�rico de modifica��es dessa janela em especifica


--> Location:

>>> browser.current_url
retorna url atual

- entendendo uma URL

ex:

http://selenium.dunossauro.live/aula_04.html

schema (protocolos): http://, https://, file://, ftp://, etc

netloc: selenium.dunossauro.live

path do arquivo: aula_04.html

- o selenium só tem a função current_url para o python
- deve-se utilizar a biblioteca URLlib para obter mais informações de uma url que o selenium n�o realiza

>>> from urllib.parse import urlparse
>>> urlparse(browser.current_url)
retorna os elementos da url citadas acima e mais


>>> browser.refresh()
atualiza a pagina em fun��o do location

* ao dar refresh na pagina, esse refresh é contabilizado e sua url é pilhada no histórico, pois ele cria uma nova requisi��o


>>> browser.title 
retorna o title da pagina


>>> from pprint import pprint
vai importar uma fun��o que realiza um print mais visivel e automatico



.CONHECENDO XPATH

- Navegando e extraindo dados de documentos html

-> XML Path Language: linguagem de consulta para selecionar e navegar por n�s de um documento xml

xml: formato baseado em texto para REPRESENTA��ES DE INFORMA��ES ESTRUTURADAS, por exemplo: documentos, configura��es, livros, transa��es e etc

o xml estrutura de modo parecido como o html

- casos de uso: arquivo de configura��o, troca de mensagens entre aplica��es, padr�o para documentos (open document format)

- muitas api retornam um xml

- no python h� libs para tratar xml

-> Parsel: lib para extrair dados de html, usado no Scrapy

>>> from parsel import Selector
>>> response = Selector(text=<arquivo>) #criar um objeto Seletor em que o arquivo � html

>>> response.xpath('/html')
retorna um objeto de caminho absoluto partindo do elemento html

>>> response.xpath('/html/head')
RETORNA um OBJETO de caminho em que o elemento head est� aninhado ao html

>>> response.xpath('/html/head').getall() 
RETORNA uma LISTA contendo os conte�do desse path

>>> response.xpath('/html/head').get()
RETORNA o CONTE�DO

*get retorna None se o path n�o for passado corretamente:

ex:	response.xpath('/title').get()	#title � um elemento filho

para isso, deve-se utilizar o //

>>> response.xpath('//title').get()	#pega TODOS os CONTE�DOS title que houver no documento

>>> response.xpath('//ul/*').getall()	#pega TODOS os CONTE�DOS LOGO A SEGUIR de todos os ul

>>> response.xpath('//ul//*).getall()	#pega TODOS OS CONTE�DOS ANINHADOS ao elemento passado

-> pegar elementos indexados
*OS INDICES AQUI COME�AM EM 1

>>> response.xpath('//ol/li[2]').getall()
retorna OS SEGUNDOS li de cada ol existente

>>> response.xpath('(//ol/li)[2])').getall()
retorna o segundo li de todos os obtidos

>>> response.xpath('//ol[1]/li[2]').getall()
de todos os ol obtido, vai pegar do primeiro, o segundo li


>>> response.xpath('//h1/text()').getall()
retorna a lista, contendo os conte�do de todos h1 obtidos


>>> respones.xpat('//h1//text()').getall()
retorna a lista contendo todos os conte�dos de todos os h1

>>> responses.xpath('(//ul/li)[last()]).getall()
retorna uma lista contendo o �ltimo li aninhado no ultimo ul

- no Elements do  DevTools, � possivel copiar o xpath de um dado elemento. Ao colar do clipboard, a string retornada � o path absoluto do elemento

*n�o � interessante utilizar um path absoluto, pois a pagina pode mudar

-> � possivel buscar pelos atributos

>>> response.xpath('//h1/@data-section').getall()
retorna uma lista contendo os VALORES dos ATRIBUTOS data-section que est�o na tag h1. � mais um caso de aninhamento, devido ao /

>>> response.xpath('//h1[@data-section]').getall()
retorna uma lista contendo todos os h1 cujo o atributo � data-section. aqui � um caso de refer�ncia, devido ao []

-> Busca no conte�do de texto

>>> response.xpath('//li[contains(text(), 'forno')]').getall()
retorna uma lista, conteudo os li cujo em seu texto haja a palavra forno


>>> response.xpath('//li[contains(., 'leite')]').getall()
retorna uma lista contendo todos os li em que haja a palavra 'leite', seja no texto seja em uma tag filha


>>> response.xpath('//li[not(contains(., 'leite')]').getall()
retorna todos os li em que N�O possua a palavra leite, onde quer que seja


>>> response.xpath('//h1[@data-qtde!='1']').getall()
retorna todos os h1 em que o valor do atributo data-qtde seja DIFERENTE de 1

- operadores de > e < funciona tbm


-> Nó

um elemento possui n�s, que s�o as rela��es que possuem com os elementos ao seu redor

- n� child: s�o as rela��es dos elementos que est�o aninhados com esse elemento
- n�s parents: s�o os elementos em que ele esta aninhado
- n�s siblins: s�o os elementos que est�o na mesma hierarquia do ninho em rela��o ao parent
  - haver� os preceding siblings e foward siblings relativo a um elemento
- n�s ancestors: s�o os elementos que s�o os ultimos parent daquele n� de siblings alinhados 

   por exemplo: um parent de um elemento � tbm seu ancestor, bem como o parent do seu parent e assim vai


- self � onde o seu seletor est� direcionado

>>> response.xpath(//h1[@data-section='ingredients']).getall()
retorna a lista contendo  o h1 em que o seu atributo data-section � ingredients 
esse h1 � o self (?)

-> Buscas por n�s

>>> response.xpath('//h1[@data-section='ingredients']/parents::div').getall()
retorna a lista contendo o parent e seu conteudo, do h1 passado


>>> response.xpath('//h1[@data-section="ingredients"]/following-sibling::ul/li').getall()
retorna uma lista: retorna todos os li aninhados aos ul tais que s�o irm�os seguintes do self, que no caso � o h1 passado


>>> response.xpath("//h2[contains(text(), 'Pudim') and contains(./preceding-sibling::h1/data-section, 'ingredients')]/following-sibling::ul/li").getall()
retorna uma lista contendo os li em que: partindo de h2 que em seu texto possua a string 'Pudim' e contenha um irm�o anterior tal que possua um h1 em que no seu atributo data-section tenha o valor 'ingredients'. O resultado ser� um elemento selecionado, que a partir dele vai se buscar de seus irm�os seguintes os li aninhados ao ul




.A5 PROCURANDO E INTERAGINDO COM ELEMENTOS

-> Atributos globais

atributos comuns entre tags do html
--> obter webElement atrav�s de atributos, independente da tag

- nesse contexto, um dos atributo pode ser o id, que sup�e-se ser �nico

>>> browser.find_element_by_id('<valor>')
esse seletor retorna o webElement cujo o id � igual ao parametro passado

- classes: se refere a um grupo que possuem caracter�sticas em comum

>>> browser.find_element_by_class_name('<valor>')
retorna o primeiro webElement cujo atributo classe � igual ao parametro


>>> browser.find_elements_by_class_name('<valor>')
retorna a lista contendo TODOS os webElemets que correspondem a essa classe


com isso, � poss�vel obter uma busca mais filtrada do webElement, conseguindo tamb�m acessar as tags com o m�todo find_elements_by_tag_name() desse webElement ou qualquer de modo aninhado obter outros webElements e tamb�m obter desses seus atributos.

alguns atributos:

- autofocus: direciona o cursor do mouse naquele elemento

- title: mostra uma mensagem ao passar o mouse por cima desse elemento

- hidden: oculta o elemento

- name: referencia o nome do campo preenchido do formul�rio 

-> Elementos Web

--> input

elemento web em que o usu�rio possa interagir com a p�gina inserindo ou selecionando dados.


>>> browser.find_element_by_name('<valor>')
retorna o webElement que possua no atributo name o valor passado. esse seletor � util pois os inputs de formul�rios costumam possuir nomes

seja um webElement obtido por find_element_by_name():

>>> element = find_element_by_name('<nome>')
>>> element.send_keys('<string>')
aqui ir� enviar a string passada para o campo input desse element


--> Forms
s�o elementos que aninham os elementos respons�veis pelos inputs dos usu�rios.


<form target=valor method=valor action=valor> 
	<input>
	<input>
	<input>
<\form>

atributos de forms:

- target: redireciona um conte�do da pagina, ap�s o submit

valores:
	_self abre na mesma janela, na current_url

	_blank abre em outra janela

- method: se o submit ser� enviado pela url ou 'escondido'

valores:	
	get: insere na url

	post: p�e dentro de um pacote e envia pelo protocolo (por request)

- action: onde ser� feito o request, carregando outra url ou carregando a atual

valores:
	url: uma outra url que ser� feita a request
	#: na current_url que ser� feita


*o form pode estar dentro de um fieldset, como de costume


-> query string 

- é uma string adicionada na url ap�s o submit a qual ser� realizada uma query dos dados passados no form

- começa com ? e a cada valor do input é separado por &

- para cada input tem: <valor de name>=<valor do input>	

- alguns caracteres s�o alterados, por exemplo o @ � %40 que corresponde ao caractere do browser

- geralmente o resultado desse submit � um json com as chaves sendo o nome do atributo name e seus valores o pr�prio valor do input
  - com isso, para decodificar esse json no python, deve-se utilizar o modulo json e chamar o m�todo loads()


SELETORES:

- maneiras de encontrar elementos dentro de uma estrutura html ou xml que tem uma sintaxe pr�pria e nomenclaturasa pr�prias.   

- Basicamente, é uma maneira e selecionar elementos usando os atributos dos pr�prios elementos

ex: m�todos como find_element_by_class e etc

- selecionar um webElement em função de uma caracter�stica passada e que este elemento possui, sendo elas atributos, valores de atributos, parentescos entre outros webElements

- Estes seletores s�o utilizados para fazer guias de estilo css, por exemplo


-> CSS Selector

4 Tipos de seletores:

- b�sicos:
  id
  tipo[tag]
  classe
  atributo
  universal
  combinados
- seletores de grupo:

- combinadores: mais de um seletores que se combinam formando outros

- pseudo[classes, elementos]

--> Seletores por id:

a sintaxe dos argumentos é como em CSS

>>> browser.find_element_by_css_selector('#<valor de um id>')

--> Seletor por tipo\tag

>>> browser.find_element_by_css_selector('<tag>')

>>> browser.find_elements_by_css_selector('<tag>')


-> Seletor por classe

>>> browser.find_element_by_css_selector('.<valor da classe>')

>>> browser.find_elements_by_css_selector('<tag>.<valor da classe>')


-> Seletor por atributos

- maneiras de obter atributos diferentes

  - [atributo]	#chave do atributo

>>> browser.find_elements_by_css_selector('[<atributo>]')

ex: 
>>> browser.find_elements_by_css_selector('[name]')

  - [atributo operador valor]

- utiliza padr�es como em regex

[atributo=valor]	#igual\exato (match)

[atributo*=valor]	#deve ocorrer algo como valor ou n�o

[atributo|=valor]	#o match exato da palavra deve ocorrer no inicio ou em algum lugar


[atributo^=valor]	#deve iniciar 

[atributo$=valor]	#terminar com o valor

[atributo~=valor]	#pelo menos um deve dar match

ex:

>>> browser.find_elements_by_css_selector('[class="form-group"]')

* o selenium n�o tem um seletor espec�fico que retorna um webElement por atributo. Deve-se ent�o utilizar um m�todo com xpath ou com css selector


--> Seletor universal

>>> browser.find_elements_by_css_selector('*')

- retorna tudo, n�o � interssante


-- Seletores combinados
pela sintaxe, pode-se combinar a seleção por tag, atributos, valores e operadores

ex:

>>> browser.find_elements_by_css_selector('input[type$="t"]')
retorna uma lista de webElements que tenham a tag input, que por sua vez o atributo type um valor que termina com o caractere "t"


>>> browser.find_elements_by_css_selector('*[for*="n"]')
retorna uma lista de todos webElements que tenha o atributo for e com ou sem o caractere igual a "n" em alguma parte do valor 

- sem o * tamb�m � equivalente

é possivel realizar um filtro maior


-> Seletores de grupos

--> lista de seletores

é possivel passar mais de uma tag, por exemplo:

>>> browser.find_elements_by_css_selector('label', 'input')
retorna uma lista com todos os webElements que tenham as tags label e input

� possivel realizar as combinações vistas mais acima em cada argumento passado


-> Seletores Combinadores

faz a relação parental
é efetivo quando a busca precisa ser aninhada

--> Seletor: irm�os adjacentes

>>> browser.find_elements_by_css_selector('elementoA' + 'elemento na mesma hierarquia que A')


--> Seletor: geral adjacente
ex:

>>> browser.find_elements_by_css_selector('h2 ~ br')

pega todos os adjacentes, independente que seja irm�o

?todo os adjacentes forwards apenas?
?pega todos os de mesma hierarquia e seus descendentes?

--> Seletor: filhos

pega os filhos partindo de um elemento

ex:

>>> browser.find_elements_by_css_selector('div > br')
retorna uma lista contendo os br que sejam filhos de algum webElement div: de todos as div, pegará os br

--> Seletor: descendentes

partindo de um elemento, pega todos os seu descendentes (elementos que estão aninhados)

ex:

>>> browser.find_elements_by_css_selector('form br')
partindo de um form, pegará todos os br, sendo filho, neto e etc


-- Seletor: pseudo

sintaxe_de_seletor:ordem-child

- primeiro filho:

é poss�vel selecionar o primeiro filho de um elemento

elemento:first-child

ex:

>>>? browser.find_element_by_css_selector('input:first-child')


- único filho:

selecionar de dentro de um elementos que s�o filhos unicos dentro de outro elemento

>>>? browser.find_element_by_css_selector('div :only-child')	#perceba o espaço após o div


- último filho:

elemento_buscado:last-child	#esse elemento deve existir na �rvore

- en�simo filho:

element_buscado:nth-child(n)	#n � um inteiro refer�nte a posi��o desse elemento buscado

- en�simo ultimo filho

element_buscado:nth-last-child(n) 	#n � um inteiro partindo do ultimo filho, em que n = 1 � o 					ultimo filho, n=2 � o penultimo e etc. INDEPENDE DO TIPO


.A7 EVENTOS

-> DOM

tag <svg> <\svg>	para tratar com imagens a ser renderizadas, podendo ter uma tag rect

refer�ncia do Mozilla

- eventos s�o o que ocorre com um webElement em resposta de uma ação do usu�rio
- Event é uma API do browser e que possui interfaces que herdam suas caracter�sticas para finalidades espec�ficas

- V�rias coisas podem acontecer na p�gina em tempo de execução

- Em relação ao DOM, o evento pode inserir ou remover elementos
- em relação ao CSSOM, o evento pode alterar ou adicionar o estilo
- é poss�vel tamb�m: salvar cookies, checar a conex�o com a internet, salvar msg no DB do browser e etc


- Ao entrar em um evento, o API do browser pode se comunicar com o hardware do pc, por exemplo

API de eventos:
- no contexto do selenium, h� duas caracter�sticas importantes dos eventos:

-- tipo(type) [nome] que é o seu nome espec�fico, ex: mouse in
-- Alvo (target): o alvo que ser� afetado por esse evento

bubbles, cancelable, currentTarget, defaultPrevented, timestamp, istrusted, ...

- O JavaScript que é a linguagem que o browser utiliza para a realização de eventos

-> API de eventos com Inline HTML
 
em um web element tem dentro de sua tag um atributo com um determinado tipo (type) cujo valor é o nome de uma função. Neste caso, h� um evento programado para acontecer em virtude do nome do atributo, por exemplo, onclick

sempre tem um prefixo on\in

- ap�s a p�gina ja est� renderizada, ao acionar um evento, a função incide sobre o web element espec�fico

-> API de eventos com Listener	

o evento n�o est� mais dentro do html, n�o h� mais o atributo onclick dentro da chave do web element

nesse caso, o evento se d� a partir da seleção do id do web element ou outra refer�ncia, e é adicionado um Event Listener, com o nome do evento e a função que ser� invocada ao ser acionado
ex:

document.getElementById('btn').addEventListener('click', func)

nesse caso, click é o type


-> Focus x Blur

quando é acionado o evento focus em um elemento, ocorre algo. quando esse foco � "perdido", ent�o � acionado o evento blur

*o evento pode ser disparado a partir de um elemento, por�m o alvo deste evento pode ser um outro elemento


-> Change

é a mudança desencadeada quando um elemento perde o foco (blur)

ex: ao inserir algo no elemento input, quando retira o foco deste elemento, um evento � disparado nesse elemento ou em outro. Ou sejam a mudan�a s� se concretiza no blur.

-> Eventos + Selenium

- o selenium divide eventos do pr�prio selenium com eventos do browser

- o selenium possui um Event Listener, cuja implementação é baseada num padr�o de projeto chamado Template Method

-- a principal ideia de um Template Method ou EventListener � verificar as condições de antes e depois. Se trata de estados acerca de uma ação

- a ideia de antes e depois � sintetizada como o que � chamado de Hooks(ganchos)

ex:

webElement1(estado A) -> Click -> webElement1(estado B)

esses estados são em função do click

*esse � um exemplo de apenas um webElement, uma vez que um evento pode ter como target mais webElement e até mesmo todo o DOM


-> EventListener

- tem como objetivo observar o estado do WEBDRIVER em todos os momentos

ex usando click():

wE.before_click() -> click() -> wE.after_click()

- Existem EventListeners de: (alguns exemplos de AbstractEventListener)

navegação: .navigate_back; .navigate_forward; .navigate_to

seletores: .find

ações: .click; .change_value_of; .execute_script

- é possivel criar uma classe para customizar Listeners que herdam de AbstractEventListener

>>> from selenium.webdriver.support.event import AbstractEventListener

>>> class tipoDeListener(AbstractEventListener):
       ...

*para poder juntar o browser instanciado com a classe de Listener é preciso ter um disparador de eventos

-> Event Firing (disparador de eventos)

- O web driver dispara eventos e o event listener escuta esses eventos

- o event firing constrói um wrapper (envólocro) do webdriver e dispara os eventos para o Listener.


>>> from selenium.webdriver.support.event import EventFiringWebDriver

...

>>> new_driver = EventFiringWebDriver(browser, tipo_de_listener())

- essa classe Event... vai juntar o browser antes instanciado e fazer com que o listener 'ouça' os eventos disparados pelo webdriver browser
- o new_driver ser� o envolucro disso

o c�digo que seria feito com a instancia browser será feita agora com new_driver

ex:

>>> new_driver.get(url)... etc


*é importante saber que o listener n�o vai catalogar a ação do evento, mas sim os estados de antes e depois. N�o vai escutar ao clicar, mas sim ser avisado ap�s o estado anterior n�o for o mesmo

*os m�todos criados na classe de listener que herda de AbstractEventListener s�o m�todos j� definidos, pois esses s�o os abstract methods 



.HOOKS E TEMPLATE METHODS

-> Template Methods

- � um padr�o de projetos comportamental
- uma classe que tem um unico m�todo e que implementa algo que seria uma interface
- o template method � um pattern que � implementado por heren�a

- uma classe X herda de uma classe abstrata ABC
  - essa classe ABC n�o pode ser instanciada e tem um m�todo concreto
- logo, essa classe X n�o pode ser instanciada, de modo que toda classe que queira utilzar ela, deve herdar de X

class X(ABC):

  def template_method(self, p):
     self.func(p)


  @abstractmethod
  def func(self, p):
     ...


os m�todos s�o apenas defini��es abstratas que devem ser desenvolvidas pelaa pr�pria classe que herda de X

com isso, a ideia de template � que seja fornecido uma determinada configura��o base que ser� 
trabalhada de acordo com as necessidades

as classes que herdam devem utilizar apenas os m�todos abstrados de X, que s�o implementadas pelo template method de X por fim. 

template method implementa os m�todos abstratos

*o n�mero de m�todos da classe que herdar de X deve ser o mesmo n�mero de m�todos das classes abstratas de X e de mesmo nome

-> Hooks

- no caso do template method, � a super classe que chama a subclasse, n�o o contr�rio, pois ela � quem estabelece a sequencia de implementa��o. assim, a super classe usa todas as coisas que foi implementado na sub classe
  - isso � conhecido como Invers�o de Controle ou princ�pio de hollywood

- uma subclass pode ter um m�todo opcional que s� ela pode implementar

com isso, na super classe � escrito duas linhas de c�digos de m�todos que PODEM SER implementados ao redor do m�todo que TEM QUE SER implementado


class X(ABC):

  def template_method(self, p):
	self.before_func()	#hooks
	self.func(p)
	self.after_func()	#hooks

  @abstractmethod
  def func(self, p):
  	...

  def before_func(self):
	...

  def after_func(self):
	...


- como a subclasse n�o pode inserir mais um m�todo, essa possibilidade deve ser incrementada na super classe

- portanto, cada classe que herda de X pode ou n�o utilizar before_func() e after_func() 



.A8 EVENTOS 2 (ActionChains)

-> Eventos de Teclado (keyboard events)

referencia da Mozilla*

- tres dipos de eventos :

keydown (apertar uma tecla)
keyup (soltar uma tecla)
accesskey


*não é possivel digitar a letra S mai�scula junto com as letras minusculas ao enviar o comando

>>> browser.find_element_by_tag_name('html').send_keys('Selenium')


- deve ser primeiro dado um key down na tecla shift ou no capslock e depois um key up no shift antes de digitar o resto

--> Atributos de teclas

- shiftKey
- altKey
- metaKey(bandeirinha Windows por exemplo)
- ctrlKey

--> m�todos modificadores de estado ( getModifierState() )

- CapsLock
- shift
- meta
- os


-> Selenium + Eventos

eventos muitas vezes dependem de interações do usu�rio

mouse, teclado, touch, ...

--> Ações

mouse: .click

teclado: send_keys, submit, clear

screenshot: .screenshot, .as_base64, .as_png


-> Action Chains (low-level API)

- s�o maneiras de automatizar ações de baixo n�vel.

o m�todo send_keys() é uma s�rie de keydown keyup

- teclado: .key_down, .key_up, .send_keys, .send_keys_to_element

obtendo a api low-level

>>> from selenium.webdriver.common.action_chains import ActionChains

>>> low = ActionChains(browser)
>>> low.move_to_element(elemento)
>>> for letra in texto:
...   low.key_down(letra)
...   low.key_up(letra)

>>> low.perform() #os comandos só começam a ser implementado a partir daqui

- todas as instruções de ActionChains s�o passadas para uma lista e que essa lista é passada para o m�todo perform que executa todas as ações

*alguns m�todos apenas o webDriver pode realizar, como o .find_element, pois o ActionChains n�o foi feito para substituir, mas apenas para auxiliar

--> m�todos de movimento em Action Chains

.move_by_offset

.move_to_element 	#se direciona para o elemento, mas sem aplicar o focus

.move_to_element_with_offset

offset é quando for utilizar as coordenadas da janela 

-> Biblioteca Keys

- é a implementação das teclas, em que cada tecla do teclado é representada por uma string unicode

>>> from selenium.webdriver.common.keys import Keys

a partir dessa biblioteca � possivel ativar as teclas pelo seu 'nome' ao inv�s de representação por strings unicode 

ex:

key_down(Keys.SHIFT)	#envia a tecla shift


-> Eventos de Mouse

ActionChains de mouse:

.click, .click_and_hold, .context_click, .double_click

--> disparos de mouse

mouseenter
mouseleave
click
dblclick
contextmenu

.move_to_element = mouseenter e mouseleave

- Atributos de ação

shiftKey
altKey
metaKey
ctrlKey

o ActionChains tem um m�todo pause() que é semelhante ao sleep



.A9 WAITS (pt 1)

-> Carregamento da página

- existe um evento atrelado ao carregamento chamado onload que atua em função do carregamento da p�gina. Esse evento ao ser finalizado, pode mudar o DOM:

-- ao entrar numa p�gina, durante o carregamento, o DOM est� de uma forma, dependendo da complexidade da p�gina, e ao concluir o carregamento, o DOM é alterado, em que a p�gina se encontra no seu estado estável

-- essa alteração do DOM ocorre tamb�m em funções de outros eventos, como por exemplo, uma interação do usu�rio vai disparar um evento que altera o estado de um elemento da p�gina

--- o evento realiza um request para o backend, por exemplo, em que a p�gina fica aguardando (on load), at� que receba a response


Modos ao carregar uma p�gina e baixar os componentes dela:

- Normal:
> primeiro é parseado o HTML, em seguida é baixado o JS, depois é executado esse JS, e por fim é parseado novamente o HTML
> Nesse modo, é executado uma tarefa por vez

- Defer
> Primeiro é parseado o HTML e em algum ponto desse processo é inicializado o download do script JS ao mesmo tempo em que é finalizado o parser do HTML. Por fim de todo esses dois processos é executado o JS

- Async:
> primeiro é parseado o HTML, e em algum ponto é baixado o JS durante o processo de parser HTML. Ao final desses dois processos é executado o JS e por fim é parseado novamente o HTML

tanto no Async como no Defer � possivel que o navegador realize mais de uma tarefa por vez


-> Tipos de espera

--> Impl�citas: espera todos os elementos, eventos, navegação com um tempo padr�o

>>> from selenium.webdriver import Firefox

>>> f = Firefox()

>>> f.implicitly_wait(30) 

- vai levar 30 segundos de espera de alguma coisa acontecer, alguma coisa geral

	Pr�s:
- essa abordagem funciona em cen�rios Flaky
- n�o precisa setar nada, vai ser esperada


Contras:
- segura a aplicação por mais tempo
- tudo é esperado tendo o mesmo tempo como base. n�o dá para saber se algo tem prioridade de tempo em relação a outras coisas
- n�o funciona para elementos espec�ficos
- se algo der errado, vai demorar o tempo do wait para saber


--> Expl�citas

- o selenium disponibiliza um range de waits prontos nesse sentido
- pode ser customizado em tipos de espera 
- é reutiliz�vel


-> WebDriverWait
ex:

>>> from selenium.webdriver.support.ui import WebDriverWait

>>> wdw = WebDriverWait(
		driver, 
		timeout,
		poll_frequency=0.5,
		ignored_exceptions=None
)

args:

- driver: é o pr�prio WebDriver
- timeout: tempo de espera até o erro
- poll_frequency: tempo entre uma tentativa e outra
- ignored_exceptions: lista de Exception a serem ignoradas

M�todo until: executa até que o `Callable` retorne True ou até estourar o `timeout`

wdw.until(
	Callable, 
	mensage
)

args:

- Callable: operação invocável que será executada, retornando True
- mensage: mensagem caso ocorra o erro

*o callable é obrigat�rio


M�todo until_not: é o inverso, em que espera até o `callable` retorne False

exemplo:

>>> from selenium.webdriver import Firefox
>>> from selenium.webdriver.support.ui import WebDriverWait

>>> browser = Firefox()
>>> wdw = WebDriverWait(browser, timeout=30)
wdw.until(<função>)


-> Esperas personalizadas

exemplo:
#incio script
def esperar_botao(webdriver):
  elements =
webdriver.find_elements_by_css_selector('button')
  return bool(elements)

#a função acima vai apenas procurar o elemento button e na ocorr�ncia deste, vai retornar um bool

wdw.until(esperar_botao)
#vai realizar a função até estourar o timeout parametrizado

browser.find_element_by_tag_name('button').click()

#fim script

*observações:

- until e until_not sempre passam o webdriver como argumento e SOMENTE ELE quem passa, ou seja, n�o se deve passar o driver para a função, pois o until e not_until quem passa o drive que recebeu para a função

- a função em questão sempre deve retornar True ou False


-> functools partial

- partial é uma função da biblioteca functools
- ela é usada para simplificar a chamada da função, de modo em que se é poss�vel utilizar um parametro

ex:

#inicio script

from functools import partial

def soma(x, y):
	return x + y

soma_de_2 = partial(s	oma, x=2)

#dessa forma, est� criado uma nova função, em que se fixando um dos par�metros, é possivel chamar a função soma com apenas um par�metro
#fim script

exemplo de aplicação após a definição e manipulação:

>>> soma_de_2(3)
'5'

com isso, é possivel chamar a função sempre em que o retorno ser� o par�metro passado somado de 2


-> By
- o By nos auxilia a deixar o c�digo mais "assertivo". Ele é comumente usado em conjunto com `wb.find_element`. Assim, nos ajuda a parametrizar mais as nossas funções

exemplo de uma aplicação que se pode melhorar:

def esperar_elemento(element, web_driver):	
		if web_driver.find_elements_by_css_selector(element):
			return True
	return False


- o By serve como um seletor din�mico

exemplo da função melhorada:

#inicio trecho do script

from selenium.webdriver.commom.by import By

def esperar_elemento(by, element, web_driver):
	return bool(web_driver.find_elements(by, element))

wdw = WebDriverWait(f, 30)
wdw.until(partial(esperar_elemento, By.CSS_SELECTOR, 'selector'))

#fim script

- o By é uma classe, que possui atributos que servem para generalizar o uso do m�todo do web driver que é o .find_elements()


-> Espera com classes

aqui evitamos o uso do partial usando `__call__`

ex:
#inicio script

class EsperarElemento:
	def __init__(self, by, selector):
	self.locator = (by, selector)

	def __call__(self, web_driver):
		if web_driver.find_elements(*locator):
			return True
		return False

web_driver_wait.until(EsperarElemento(By.Id, 'meu_id'))


- os waits que o selenium implementa s�o por classes

#fim script


-> Locators

Locators são maneiras de unir o By a string do elemento

por�m o conceito é trazido de selenium java e faz pouco ou nenhum sentido usando em python

resumidamente um Locator é uma tupla com o By eaa string do elemento

ex da senten�a acima:
from selenium.webdriver.common.by import By

locator = (By.CSS_SELECTOR, 'div.minha_classe')



a maioria das implementações dos waits padr�o que o selenium disponibiliza s�o em locators

exemplo:

#inicio script

from functools import partial
from seleenium.webdriver.common.by import By

def esperar_elemento(locator, web_driver):
	if web_driver.find_elements(*locator):
		return True
	return False

locator = (By.CSS_SELECTOR, 'div.minha_classe')

wdw = WebDriverWait(f, 30)

wdw.until(
	partial(
		esperar_elemento(By.ID, 'id_do_elemento')	
	)
)

#fim script


- é poss�vel que elementos tenham um atributo que anula os eventos de click

no caso seria algo do tipo:

.unclick {
	pointer-events: none
}

- nesse caso, o m�todo .click() n�o poderia ser realizado, podendo até mesmo subir uma exception caso feito


o contr�rio disso seria algo do tipo:

	pointer-events: visible

- dessa forma, o elemento fica visivel para o evento de interação com click



--> Esperando elemento ativo:

embora seja poss�vel ver o elemento, ele n�o tem as caracter�sticas que precisamos para clicar, ou seja, n�o aceita eventos de click

precisamos esperar o elemento estar ativo is_enabled

exemplo de implementação:

def esperar_ser_clicavel(element, web_driver):
	print(f'esperando {element}')
	elements = web_driver.find_elements_by_css_selector(element)
	if elements:
		return elements[0].is_enabled()
	return False



.A10 WAITS (pt 2)

Expected Conditions:

são classes prontas para esperas "comuns", "usuais". Podem ser enxergada pelas categorias:

- Existencia do elemento
- visibilidade do elemento
- navegação
- verificação de texto
- janelas e frames

expected_conditions é o nome de um módulo na lib do Selenium

> Existência do elemento

Saber se o elemento está na tela ou existe na tela. Evita tentar executar uma operação em um elemento que pode ainda não estar disponível

...
>>> from selenium.webdriver.support.expected_conditions import presence_of_element_located

>>> locator = (By.CSS_SELECTOR, 'button.myclass')

>>> wdw.until(presence_of_element_located(locator))
vai verificar se o elemento está presente no local passado como locator


> Visibilidade do elemento:

saber se o elemento está desenhado na tela ou não, e também se ele está ativo ou não

ex:

- o elemento pode não ter sido desenhado
- o elemento pode ter sido desenhado mas pode estar inativo


visibility_of(web_element):
como as funções passadas para o wdw.until, retorna True caso o web element passado for visível na tela


invisibility_of(web_element):
é o oposto da função acima


visibility_of_element_located(locator):
é o mesmo que a função visibility_of, mas se deve passar o locator


invisibility_of_element_located(locator):
é o oposto da função acima


visibility_of_any_element_located(locator):
é mais generalista, busca o locator em qualquer web element, retornando True no primeiro que encontrar


visibiliy_of_all_element_located(locator):
encontra todos web_elements com a caracteristica passada em locator


staleness_of(web_element):
verifica se o web_element está habilitado. Referente ao valor HTML disabled presente (ou não) no web element 

element_to_be_clickable(web_element):
verifica as duas coisas, se está vísivel e se está ativo, checando tanto o CSS quanto o HTML

> Navegação:
esperas baseadas em navegação

- Url corrente é:

url_changes(url):
verifica se a url passada é diferente da url corrente, retornando o booleano disso

url_to_be(url):
retorna se a url passada é a url corrente


- URL corrente contém:

url_matches(pattern):
retorna se a o padrão passado se encontra na url corrente por regex


url_contains(url):
retorna de a url passada está em algum trecho da url atual


- Título:
	
title_is(title):
retorna se o titulo passado é igual o título corrente do driver


title_contains(title):
retorna se o titulo passado está no título corrente do driver	


- Verificação de texto

verificar se dentro de um web element existe um determinado tipo de texto


text_to_be_present_in_element(locator, text):
retorna se o texto está dentro do elemento


text_to_be_present_in_element_value(locator, text):
retorna se o texto está presente no valor 


.A11 INTERAGINDO COM JANELAS, ABAS, ALERTAS E FRAMES

Contexto de alertas:

from selenium.webdriver import Firefox

f = Firefox()
...

f.switch_to.alert 
ou 
f.switch_to_alert()

a SEGUNDA é DEPRECATED, assim como os métodos () nesse sentido


alert = f.switch_to.alert 

retorna um objeto seleniu.webdriver.commom.alert.Alert

esse objeto tem alguns métodos e atributos:

- accept
- dismiss
- send_keys
- text

é possível importar o objeto alerta:

from selenium.webdriver.common.alert import Alert

alerta = Alert(webdriver)

essa classe em expecífica lida com erros, caso o alerta não esteja presente. a classe pode ser instanciada a qualquer momento no código, porém a primeira abordagem (switch_to.alert) acessa o alerta, se existir, apenas nesse instante, saindo do DOM e indo pro alert vigente. esse primeiro caso tbm deve ser instanciado após a aparição do alerta


Waits em alertas

from selenium.webdriver.support.expected_conditions import alert_is_present

alert_is_present():
retorna True caso o aelrta estiver na tela

alerta = wdw.until(alert_is_present()) 
isso retorna um alerta, pois essa função alert_is_present realiza um switch_to


Janelas e abas

uma janela tem um current_window_handle com um ID específico da janela em que o webdriver atribui esse ID de sessão

>>> driver.current_window_handle
retorna o código do ID

para cada aba, havera um ID desse diferente

para obter a lista com todos esses ID:
>>> browser.window_handles

JANELAS == ABAS
JANELAS == POPUPS

mudando entre as janelas:

>>> browser.switch_to.window(ID)


Abrindo abas usando script

>>> browser.execute_script(codigo_JS)


Waits em janelas

new_window_is_opened(current_handles):
retorna True se uma nova janela foi aberta


number_of_windows_to_be(num_windows):
retorna True se o número de janelas abertas é igual ao numero de janelas passada


Iframes

deve ocorrer um switch de um DOM para outro DOM, pois o Iframe é um outro DOM

browser.switch_to.frame(atributo_name_do_frame)


Waits em iframe

frame_to_be_available_and_switch_to_it(locator):
retorna True se o frame estiver disponível e puder mudar mudar pra ele